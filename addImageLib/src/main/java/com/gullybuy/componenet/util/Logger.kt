package com.gullybuy.componenet.util

import android.util.Log
import com.gullybuy.componenet.add_image_util.BuildConfig

import java.io.*
import java.util.*

class Logger {

    companion object {

        private const val pkgName = "com.gullybuy.component"

        val logFilePath: String = android.os.Environment.getExternalStorageDirectory().path+"/UploadImageLog"

        var IS_DEBUG: Boolean = BuildConfig.DEBUG
        private const val IS_TEST = true
        fun d(TAG: String, message: String) {
            if (IS_TEST) {
                println("$TAG >> $message")
                return
            }
            if (IS_DEBUG) Log.d(TAG, "$TAG >> $message")
        }

        fun log(TAG: String, message: String) {
            if (IS_TEST) {
                println("$TAG >> $message")
                return
            }
            if (IS_DEBUG) {
                d(TAG, "$TAG >> $message")
                return
            }
            writeLogToFile(TAG, message)
        }

        fun writeLogToFile(TAG: String, message: String) {
            //
            if (IS_DEBUG) {
                d(TAG, "$TAG >> $message")
            }
            var out: PrintWriter? = null
            try {
                val root = File(logFilePath)
                if (!root.exists()) root.mkdirs()
              //  val simpleDateFormat = SimpleDateFormat("dd-MMM-yy", Locale.getDefault())
                //val logDate = simpleDateFormat.format(System.currentTimeMillis())
                //val fileName = "$root/Log_$logDate.txt"
                val fileName = "$root/UploadImageLog.txt"
                out = PrintWriter(BufferedWriter(FileWriter(fileName, true)))
                out.println(Date(System.currentTimeMillis()).toString() + " :: " + TAG + " >> " + message)
            } catch (e: IOException) {
                d(TAG, "writeTofile Error" + message + " > " + e.message)
            } finally {
                try {
                    out!!.close()
                } catch (ignored: Exception) { // ignore exceptions generated by close()
                }
            }
        }

        fun writeStack(TAG: String, e: Exception) {
            if (IS_DEBUG) {
                d(TAG, " >> " + e.message)
                e.printStackTrace()
                return
            }
            val stackTrace = StringWriter()
            try {
                e.printStackTrace(PrintWriter(stackTrace))
                writeLogToFile(Date(System.currentTimeMillis()).toString() + "", "-------------Exception-----------------")
                writeLogToFile(TAG, stackTrace.toString())
                writeLogToFile("", "----------------------------------------")
            } catch (ex: Exception) {
                d(TAG, "Error in writeStackTrace$stackTrace")
            }
        }
    }
}